// Copyright (c) 2021 the Skulpt Project
// SPDX-License-Identifier: MIT

/* File automatically generated by gen_asdl/__main__.py. */
// deno-lint-ignore-file no-explicit-any

import type {
    AST,
    Module,
    Interactive,
    Expression,
    FunctionType,
    FunctionDef,
    AsyncFunctionDef,
    ClassDef,
    Return,
    Delete,
    Assign,
    AugAssign,
    AnnAssign,
    For,
    AsyncFor,
    While,
    If,
    With,
    AsyncWith,
    Raise,
    Try,
    Assert,
    Import,
    ImportFrom,
    Global,
    Nonlocal,
    Expr,
    Pass,
    Break,
    Continue,
    Debugger,
    BoolOp,
    NamedExpr,
    BinOp,
    UnaryOp,
    Lambda,
    IfExp,
    Dict,
    Set_,
    ListComp,
    SetComp,
    DictComp,
    GeneratorExp,
    Await,
    Yield,
    YieldFrom,
    Compare,
    Call,
    FormattedValue,
    JoinedStr,
    Constant,
    Attribute,
    Subscript,
    Starred,
    Name,
    List,
    Tuple,
    Slice,
    comprehension,
    ExceptHandler,
    arguments_,
    arg,
    keyword,
    alias,
    withitem,
    TypeIgnore,
} from "./astnodes.ts";

export abstract class ASTVisitor {
    visitSeq(seq: AST[] | null) {
        if (seq === null) return null;
        for (const node of seq) {
            node.walkabout(this);
        }
    }

    defaultVisitor(_node: AST): any {
        throw new Error("NodeVisitor not implemented");
    }

    visit_Module(node: Module): any {
        return this.defaultVisitor(node);
    }
    visit_Interactive(node: Interactive): any {
        return this.defaultVisitor(node);
    }
    visit_Expression(node: Expression): any {
        return this.defaultVisitor(node);
    }
    visit_FunctionType(node: FunctionType): any {
        return this.defaultVisitor(node);
    }
    visit_FunctionDef(node: FunctionDef): any {
        return this.defaultVisitor(node);
    }
    visit_AsyncFunctionDef(node: AsyncFunctionDef): any {
        return this.defaultVisitor(node);
    }
    visit_ClassDef(node: ClassDef): any {
        return this.defaultVisitor(node);
    }
    visit_Return(node: Return): any {
        return this.defaultVisitor(node);
    }
    visit_Delete(node: Delete): any {
        return this.defaultVisitor(node);
    }
    visit_Assign(node: Assign): any {
        return this.defaultVisitor(node);
    }
    visit_AugAssign(node: AugAssign): any {
        return this.defaultVisitor(node);
    }
    visit_AnnAssign(node: AnnAssign): any {
        return this.defaultVisitor(node);
    }
    visit_For(node: For): any {
        return this.defaultVisitor(node);
    }
    visit_AsyncFor(node: AsyncFor): any {
        return this.defaultVisitor(node);
    }
    visit_While(node: While): any {
        return this.defaultVisitor(node);
    }
    visit_If(node: If): any {
        return this.defaultVisitor(node);
    }
    visit_With(node: With): any {
        return this.defaultVisitor(node);
    }
    visit_AsyncWith(node: AsyncWith): any {
        return this.defaultVisitor(node);
    }
    visit_Raise(node: Raise): any {
        return this.defaultVisitor(node);
    }
    visit_Try(node: Try): any {
        return this.defaultVisitor(node);
    }
    visit_Assert(node: Assert): any {
        return this.defaultVisitor(node);
    }
    visit_Import(node: Import): any {
        return this.defaultVisitor(node);
    }
    visit_ImportFrom(node: ImportFrom): any {
        return this.defaultVisitor(node);
    }
    visit_Global(node: Global): any {
        return this.defaultVisitor(node);
    }
    visit_Nonlocal(node: Nonlocal): any {
        return this.defaultVisitor(node);
    }
    visit_Expr(node: Expr): any {
        return this.defaultVisitor(node);
    }
    visit_Pass(node: Pass): any {
        return this.defaultVisitor(node);
    }
    visit_Break(node: Break): any {
        return this.defaultVisitor(node);
    }
    visit_Continue(node: Continue): any {
        return this.defaultVisitor(node);
    }
    visit_Debugger(node: Debugger): any {
        return this.defaultVisitor(node);
    }
    visit_BoolOp(node: BoolOp): any {
        return this.defaultVisitor(node);
    }
    visit_NamedExpr(node: NamedExpr): any {
        return this.defaultVisitor(node);
    }
    visit_BinOp(node: BinOp): any {
        return this.defaultVisitor(node);
    }
    visit_UnaryOp(node: UnaryOp): any {
        return this.defaultVisitor(node);
    }
    visit_Lambda(node: Lambda): any {
        return this.defaultVisitor(node);
    }
    visit_IfExp(node: IfExp): any {
        return this.defaultVisitor(node);
    }
    visit_Dict(node: Dict): any {
        return this.defaultVisitor(node);
    }
    visit_Set_(node: Set_): any {
        return this.defaultVisitor(node);
    }
    visit_ListComp(node: ListComp): any {
        return this.defaultVisitor(node);
    }
    visit_SetComp(node: SetComp): any {
        return this.defaultVisitor(node);
    }
    visit_DictComp(node: DictComp): any {
        return this.defaultVisitor(node);
    }
    visit_GeneratorExp(node: GeneratorExp): any {
        return this.defaultVisitor(node);
    }
    visit_Await(node: Await): any {
        return this.defaultVisitor(node);
    }
    visit_Yield(node: Yield): any {
        return this.defaultVisitor(node);
    }
    visit_YieldFrom(node: YieldFrom): any {
        return this.defaultVisitor(node);
    }
    visit_Compare(node: Compare): any {
        return this.defaultVisitor(node);
    }
    visit_Call(node: Call): any {
        return this.defaultVisitor(node);
    }
    visit_FormattedValue(node: FormattedValue): any {
        return this.defaultVisitor(node);
    }
    visit_JoinedStr(node: JoinedStr): any {
        return this.defaultVisitor(node);
    }
    visit_Constant(node: Constant): any {
        return this.defaultVisitor(node);
    }
    visit_Attribute(node: Attribute): any {
        return this.defaultVisitor(node);
    }
    visit_Subscript(node: Subscript): any {
        return this.defaultVisitor(node);
    }
    visit_Starred(node: Starred): any {
        return this.defaultVisitor(node);
    }
    visit_Name(node: Name): any {
        return this.defaultVisitor(node);
    }
    visit_List(node: List): any {
        return this.defaultVisitor(node);
    }
    visit_Tuple(node: Tuple): any {
        return this.defaultVisitor(node);
    }
    visit_Slice(node: Slice): any {
        return this.defaultVisitor(node);
    }
    visit_comprehension(node: comprehension): any {
        return this.defaultVisitor(node);
    }
    visit_ExceptHandler(node: ExceptHandler): any {
        return this.defaultVisitor(node);
    }
    visit_arguments_(node: arguments_): any {
        return this.defaultVisitor(node);
    }
    visit_arg(node: arg): any {
        return this.defaultVisitor(node);
    }
    visit_keyword(node: keyword): any {
        return this.defaultVisitor(node);
    }
    visit_alias(node: alias): any {
        return this.defaultVisitor(node);
    }
    visit_withitem(node: withitem): any {
        return this.defaultVisitor(node);
    }
    visit_TypeIgnore(node: TypeIgnore): any {
        return this.defaultVisitor(node);
    }
}
