Module(
    body=[
        ImportFrom(
            module='math',
            names=[
                alias(name='*')],
            level=0),
        FunctionDef(
            name='differentiate',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='f'),
                    arg(arg='method'),
                    arg(arg='h')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[
                    Constant(value=1e-05)]),
            body=[
                If(
                    test=Compare(
                        left=Name(id='method', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value='Forward1')]),
                    body=[
                        FunctionDef(
                            name='Forward1',
                            args=arguments(
                                posonlyargs=[],
                                args=[
                                    arg(arg='x')],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Return(
                                    value=BinOp(
                                        left=BinOp(
                                            left=Call(
                                                func=Name(id='f', ctx=Load()),
                                                args=[
                                                    BinOp(
                                                        left=Name(id='x', ctx=Load()),
                                                        op=Add(),
                                                        right=Name(id='h', ctx=Load()))],
                                                keywords=[]),
                                            op=Sub(),
                                            right=Call(
                                                func=Name(id='f', ctx=Load()),
                                                args=[
                                                    Name(id='x', ctx=Load())],
                                                keywords=[])),
                                        op=Div(),
                                        right=Name(id='h', ctx=Load())))],
                            decorator_list=[]),
                        Return(
                            value=Name(id='Forward1', ctx=Load()))],
                    orelse=[
                        If(
                            test=Compare(
                                left=Name(id='method', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value='Backward1')]),
                            body=[
                                FunctionDef(
                                    name='Backward1',
                                    args=arguments(
                                        posonlyargs=[],
                                        args=[
                                            arg(arg='x')],
                                        kwonlyargs=[],
                                        kw_defaults=[],
                                        defaults=[]),
                                    body=[
                                        Return(
                                            value=BinOp(
                                                left=BinOp(
                                                    left=Call(
                                                        func=Name(id='f', ctx=Load()),
                                                        args=[
                                                            Name(id='x', ctx=Load())],
                                                        keywords=[]),
                                                    op=Sub(),
                                                    right=Call(
                                                        func=Name(id='f', ctx=Load()),
                                                        args=[
                                                            BinOp(
                                                                left=Name(id='x', ctx=Load()),
                                                                op=Sub(),
                                                                right=Name(id='h', ctx=Load()))],
                                                        keywords=[])),
                                                op=Div(),
                                                right=Name(id='h', ctx=Load())))],
                                    decorator_list=[]),
                                Return(
                                    value=Name(id='Backward1', ctx=Load()))],
                            orelse=[])])],
            decorator_list=[]),
        Assign(
            targets=[
                Name(id='mycos', ctx=Store())],
            value=Call(
                func=Name(id='differentiate', ctx=Load()),
                args=[
                    Name(id='sin', ctx=Load()),
                    Constant(value='Forward1')],
                keywords=[])),
        Assign(
            targets=[
                Name(id='mysin', ctx=Store())],
            value=Call(
                func=Name(id='differentiate', ctx=Load()),
                args=[
                    Name(id='mycos', ctx=Load()),
                    Constant(value='Backward1'),
                    Constant(value=1e-06)],
                keywords=[])),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Name(id='pi', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Constant(value='%.10f %.10f %.5f %.10f'),
                        op=Mod(),
                        right=Tuple(
                            elts=[
                                Call(
                                    func=Name(id='mycos', ctx=Load()),
                                    args=[
                                        Name(id='x', ctx=Load())],
                                    keywords=[]),
                                Call(
                                    func=Name(id='cos', ctx=Load()),
                                    args=[
                                        Name(id='x', ctx=Load())],
                                    keywords=[]),
                                Call(
                                    func=Name(id='mysin', ctx=Load()),
                                    args=[
                                        Name(id='x', ctx=Load())],
                                    keywords=[]),
                                UnaryOp(
                                    op=USub(),
                                    operand=Call(
                                        func=Name(id='sin', ctx=Load()),
                                        args=[
                                            Name(id='x', ctx=Load())],
                                        keywords=[]))],
                            ctx=Load()))],
                keywords=[]))],
    type_ignores=[])