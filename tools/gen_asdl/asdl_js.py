#! /usr/bin/env python
"""Generate JS code from an ASDL description."""

# TO DO
# handle fields that have a type but no name

import os
import sys
import subprocess

import asdl

TABSIZE = 4
MAX_COL = 119

C_TO_TS_TYPES = {"int": "number"}


def clean_name(name: str) -> str:
    if name[-1] == "_":
        return name[:-1]
    return name


def get_ts_type(name: str) -> str:
    """Return a string for the ts name of the type.

    This function special cases the default types provided by asdl:
    identifier, string, int, bool.
    """
    if name in asdl.builtin_types:
        return C_TO_TS_TYPES.get(name, name)
    else:
        return name


def reflow_lines(s, depth):
    """Reflow the line s indented depth tabs.

    Return a sequence of lines where no line extends beyond MAX_COL
    when properly indented.  The first line is properly indented based
    exclusively on depth * TABSIZE.  All following lines -- these are
    the reflowed lines generated by this function -- start at the same
    column as the first character beyond the opening { in the first
    line.
    """
    size = MAX_COL - depth * TABSIZE
    if len(s) < size:
        return [s]

    lines = []
    cur = s
    padding = ""
    while len(cur) > size:
        i = cur.rfind(" ", 0, size)
        # XXX this should be fixed for real
        if i == -1 and "GeneratorExp" in cur:
            i = size + 3
        assert i != -1, "Impossible line %d to reflow: %r" % (size, s)
        lines.append(padding + cur[:i])
        if len(lines) == 1:
            # find new size based on brace
            j = cur.find("{", 0, i)
            if j >= 0:
                j += 2  # account for the brace and the space after it
                size -= j
                padding = " " * j
            else:
                j = cur.find("(", 0, i)
                if j >= 0:
                    j += 1  # account for the paren (no space after it)
                    size -= j
                    padding = " " * j
        cur = cur[i + 1 :]
    else:
        lines.append(padding + cur)
    return lines


def is_simple(sum):
    """Return True if a sum is a simple.

    A sum is simple if its types have no fields, e.g.
    unaryop = Invert | Not | UAdd | USub
    """
    for t in sum.types:
        if t.fields:
            return False
    return True


class EmitVisitor(asdl.VisitorBase):
    """Visit that emits lines"""

    def __init__(self, file):
        self.file = file
        super(EmitVisitor, self).__init__()

    def emit(self, s, depth, reflow=1):
        # XXX reflow long lines?
        if reflow:
            lines = reflow_lines(s, depth)
        else:
            lines = [s]
        for line in lines:
            line = (" " * TABSIZE * depth) + line + "\n"
            self.file.write(line)

    def emit_tp_name(self, name):
        self.emit(f'{name}.prototype.tp$name = "{clean_name(name)}";', 0, 0)


class TypeDefVisitor(EmitVisitor):
    def visitModule(self, mod):
        for dfn in mod.dfns:
            self.visit(dfn)

    def visitType(self, type, depth=0):
        self.visit(type.value, type.name, depth)

    def visitSum(self, sum, name, depth):
        if is_simple(sum):
            self.simple_sum(sum, name, depth)

    def simple_sum(self, sum, name, depth):
        def emit(s, depth=depth):
            self.emit(s, depth)

        emit(f"/* ----- {name} ----- */")
        emit(f"export class {name} extends AST {{}}")
        self.emit_tp_name(name)
        emit("")

        for i in range(len(sum.types)):
            type = sum.types[i]
            emit(f"export class {type.name} extends {name} {{}}")
            self.emit_tp_name(type.name)
        emit("")

    def visitProduct(self, product, name, depth):
        pass


class PrototypeVisitor(EmitVisitor):
    """Generate function prototypes for the .h file"""

    def visitModule(self, mod):
        for dfn in mod.dfns:
            self.visit(dfn)

    def visitType(self, type):
        self.visit(type.value, type.name)

    def visitSum(self, sum, name):
        if is_simple(sum):
            pass  # XXX
        else:
            self.emit(f"/* ----- {name} ----- */", 0)
            self.emit_base(name, self.get_args(sum.attributes))
            for t in sum.types:
                self.visit(t, name, sum.attributes)

    def get_args(self, fields):
        """Return list of ts argument into, one for each field.

        Argument info is 3-tuple of a ts type, variable name, and flag
        that is true if type can be NULL.
        """
        args = []
        unnamed = {}
        for f in fields:
            if f.name is None:
                name = f.type
                c = unnamed[name] = unnamed.get(name, 0) + 1
                if c > 1:
                    name = "name%d" % (c - 1)
            else:
                name = f.name
            # XXX should extend get_c_type() to handle this
            if f.seq:
                if f.type in ("cmpop",):
                    ts_type = "number[]"
                else:
                    ts_type = f"{f.type}[]"
            else:
                ts_type = get_ts_type(f.type)
            args.append((ts_type, name, f.opt))
        return args

    @staticmethod
    def args_to_ts(args, attrs=False):
        ts_args = []
        for atype, aname, opt in args:
            atype = atype
            if opt:
                # optional types really means can be null rather than optional
                atype = atype if not opt else atype + " | null"
            ts_args.append(f"{aname}{'?' if opt and attrs else ''}: {atype}")
        return ts_args

    def visitConstructor(self, cons, type, attrs):
        args = self.get_args(cons.fields)
        attrs = self.get_args(attrs)
        ts_type = get_ts_type(type)
        self.emit_function(cons.name, ts_type, args, attrs)

    def visitProduct(self, prod, name):
        self.emit(f"/* ----- {name} ----- */", 0)
        self.emit_function(name, get_ts_type(name), self.get_args(prod.fields), [], union=0)


class FunctionVisitor(PrototypeVisitor):
    """Visitor to generate constructorfunctions for AST."""

    def emit(self, s, depth=0, reflow=1):
        super().emit(s, depth, reflow)

    def emit_function(self, name, ts_type, args, attrs, union=1):
        emit = self.emit

        _args = self.args_to_ts(args)

        arg_names = "[" + ", ".join(map(lambda arg: f'"{arg[1]}"', args)) + "]"

        emit(f"export class {name} extends {ts_type if union else 'AST'} {{")
        for arg in _args:
            emit(arg + ";", 1)

        _args = ", ".join(_args)
        if attrs:
            sep = ", " if args else ""
            constructorArgs = f"constructor({_args}{sep}...attrs: {ts_type}Attrs) {{"
            emit(constructorArgs, 1)
            emit("super(...attrs);", 2)
        else:
            emit(f"constructor({_args}) {{", 1)
            emit("super();", 2)

        if union:
            self.emit_body_union(name, args, attrs)
        else:
            self.emit_body_struct(name, args, attrs)
        emit("}", 1)
        emit("}")
        # keep this on the prototype because defining it inside the class, e.g.
        # _fields = ['arg0', 'arg1'];
        # is an instance definition not a prototype definition so is created per instance
        # similarly:
        # static _fields = ['arg0', 'arg1'];
        # is also not what we want since to retrieve it from an instance has to call the constructor
        # js class definitions are almost perfect - apart from this!
        # related discussion https://github.com/Microsoft/TypeScript/issues/3743
        # could instead use
        # get _fields () {return ['arg0', 'arg1'];}
        emit(f"{name}.prototype._fields = {arg_names};")
        self.emit_tp_name(name)
        emit("")

    def emit_body_union(self, name, args, attrs):
        self.emit_body_attrs(args)
        # don't both with the attrs since we inherit these from the super class

    def emit_body_struct(self, name, args, attrs):
        self.emit_body_attrs(args)
        assert not attrs

    def emit_body_attrs(self, attrs):
        emit = self.emit
        for _, argname, _ in attrs:
            emit(f"this.{argname} = {argname};", 2)

    def emit_base(self, name, attrs):
        emit = self.emit
        _attrs = self.args_to_ts(attrs, True)

        if not attrs:
            emit(f"export class {name} extends AST {{}}")
            self.emit_tp_name(name)
            emit("")
            return

        emit(f"export class {name} extends AST {{")

        for attr in _attrs:
            emit(attr + ";", 1)

        _attrs = ", ".join(_attrs)

        emit(f"constructor({_attrs}) {{", 1)
        emit("super();", 2)
        self.emit_body_attrs(attrs)
        emit("}", 1)
        emit("}")
        attr_names = ", ".join(map(lambda arg: f'"{arg[1]}"', attrs))
        emit(f"{name}.prototype._attributes = [{attr_names}];")
        self.emit_tp_name(name)
        emit("")
        emit(f"type {name}Attrs = [{_attrs}];")
        emit("")


class ChainOfVisitors:
    def __init__(self, *visitors):
        self.visitors = visitors

    def visit(self, object):
        for v in self.visitors:
            v.visit(object)


common_msg = "/* File automatically generated by %s. */\n\n"


def main(asdlfile, outputfile):
    argv0 = sys.argv[0]
    components = argv0.split(os.sep)
    argv0 = os.sep.join(components[-2:])
    auto_gen_msg = common_msg % argv0
    with open(asdlfile, "r") as file:
        lines = file.read().replace("arguments", "arguments_").replace("Continue", "Continue | Debugger")
    with open("temp.asdl", "w") as f:
        f.write(lines)

    mod = asdl.parse("temp.asdl")
    os.remove("temp.asdl")
    if not asdl.check(mod):
        sys.exit(1)

    f = open(outputfile, "w")

    f.write(auto_gen_msg)
    f.write("/* Object that holds all nodes */\n")
    f.write(
        """
/** @todo these should be a python types */
export type identifier = string;
export type constant = any;
"""
    )

    f.write(
        """
/** base class for all AST nodes */
export interface AST {
    _fields: string[];
    _attributes: string[];
    tp$name: string;
}

export class AST {}
AST.prototype._attributes = [];
AST.prototype._fields = [];
AST.prototype.tp$name = "AST";

"""
    )

    f.write("/* ---------------------- */\n")
    f.write("/* constructors for nodes */\n")
    f.write("/* ---------------------- */\n")
    f.write("\n")

    c = TypeDefVisitor(f)
    c.visit(mod)

    v = FunctionVisitor(f)
    v.visit(mod)

    f.close()

    # run prettier over the file
    subprocess.run(["pre-commit", "run", "prettier", "--files", outputfile])
